<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.backend.be.mapper.DynamicTableMapper">

    <select id="getAllTableNames" resultType="string">
        SELECT table_name
        FROM information_schema.tables
        WHERE table_schema = 'public'
          AND table_type = 'BASE TABLE'
          AND table_name NOT LIKE 'pg_%'
          AND table_name NOT LIKE 'sql_%'
    </select>

    <select id="tableExists" parameterType="string" resultType="boolean">
        SELECT COUNT(*)
        FROM information_schema.tables
        WHERE table_schema = 'public' AND table_name = #{tableName}
    </select>

    <select id="getTableData" parameterType="string" resultMap="mapResult">
        SELECT * FROM ${tableName} LIMIT 1000
    </select>

    <select id="getTableSchema" parameterType="string" resultMap="mapResult">
        SELECT column_name, data_type, is_nullable
        FROM information_schema.columns
        WHERE table_schema = 'public' AND table_name = #{tableName}
        ORDER BY ordinal_position
    </select>

    <select id='getSpatialTables' resultType="string">
        SELECT f_table_name
        FROM geometry_columns
        WHERE f_table_schema = 'public'
    </select>

    <resultMap id="mapResult" type="map">
        <id property="column_name" column="column_name"/>
        <result property="data_type" column="data_type"/>
        <result property="is_nullable" column="is_nullable"/>
    </resultMap>

<select id="getSpatialTableGeojson" parameterType="string" resultType="string">
    <!-- 动态检测几何字段 -->
    <choose>
        <!-- 对于map_elements表，使用element_location字段 -->
        <when test="tableName == 'map_elements'">
            SELECT jsonb_build_object(
                'type', 'FeatureCollection',
                'features', jsonb_agg(
                    jsonb_build_object(
                        'type', 'Feature',
                        'geometry', ST_AsGeoJSON(ST_Transform(element_location, 4326))::jsonb,
                        'properties', to_jsonb(sub) - 'element_location'
                    )
                )
            ) AS geojson
            FROM (
                SELECT * 
                FROM ${tableName}
            ) AS sub
        </when>
        <!-- 对于其他表，默认使用geom字段 -->
        <otherwise>
            SELECT jsonb_build_object(
                'type', 'FeatureCollection',
                'features', jsonb_agg(
                    jsonb_build_object(
                        'type', 'Feature',
                        'geometry', ST_AsGeoJSON(ST_Transform(geom, 4326))::jsonb,
                        'properties', to_jsonb(sub) - 'geom'
                    )
                )
            ) AS geojson
            FROM (
                SELECT * 
                FROM ${tableName}
            ) AS sub
        </otherwise>
    </choose>
</select>

<select id="getSpatialTablesGeojson" parameterType="com.backend.be.model.SpatialTableRequest" resultType="string">
    <!-- 动态检测几何字段 -->
    <choose>
        <!-- 对于map_elements表，使用element_location字段 -->
        <when test="table == 'map_elements'">
            SELECT jsonb_build_object(
                'type', 'FeatureCollection',
                'features', jsonb_agg(
                    jsonb_build_object(
                        'type', 'Feature',
                        'geometry', ST_AsGeoJSON(ST_Transform(element_location, 4326))::jsonb,
                        'properties', to_jsonb(sub) - 'element_location'
                    )
                )
            ) AS geojson
            FROM (
                SELECT * 
                FROM ${table}
                WHERE 1=1
                <if test="name != null and name != ''">
                    AND name LIKE CONCAT('%', #{name}, '%')
                </if>
                <if test="categories != null and categories != ''">
                    AND categories LIKE CONCAT('%', #{categories}, '%')
                </if>
                <if test="geom != null and geom != ''">
                    <choose>
                        <when test="geom.startsWith('POINT')">
                            AND ST_Intersects(ST_Transform(element_location, 4326), ST_GeomFromText(#{geom}, 4326))
                        </when>
                        <when test="geom.startsWith('POLYGON') or geom.startsWith('MULTIPOLYGON') or geom.startsWith('LINESTRING') or geom.startsWith('MULTILINESTRING')">
                            AND ST_Intersects(ST_Transform(element_location, 4326), ST_GeomFromText(#{geom}, 4326))
                        </when>
                        <otherwise>
                            AND ST_Intersects(ST_Transform(element_location, 4326), ST_GeomFromText(#{geom}, 4326))
                        </otherwise>
                    </choose>
                </if>
            ) AS sub
        </when>
        <!-- 对于其他表，默认使用geom字段 -->
        <otherwise>
            SELECT jsonb_build_object(
                'type', 'FeatureCollection',
                'features', jsonb_agg(
                    jsonb_build_object(
                        'type', 'Feature',
                        'geometry', ST_AsGeoJSON(ST_Transform(geom, 4326))::jsonb,
                        'properties', to_jsonb(sub) - 'geom'
                    )
                )
            ) AS geojson
            FROM (
                SELECT * 
                FROM ${table}
                WHERE 1=1
                <if test="name != null and name != ''">
                    AND name LIKE CONCAT('%', #{name}, '%')
                </if>
                <if test="categories != null and categories != ''">
                    AND categories LIKE CONCAT('%', #{categories}, '%')
                </if>
                <if test="geom != null and geom != ''">
                    <choose>
                        <when test="geom.startsWith('POINT')">
                            AND ST_Intersects(ST_Transform(geom, 4326), ST_GeomFromText(#{geom}, 4326))
                        </when>
                        <when test="geom.startsWith('POLYGON') or geom.startsWith('MULTIPOLYGON') or geom.startsWith('LINESTRING') or geom.startsWith('MULTILINESTRING')">
                            AND ST_Intersects(ST_Transform(geom, 4326), ST_GeomFromText(#{geom}, 4326))
                        </when>
                        <otherwise>
                            AND ST_Intersects(ST_Transform(geom, 4326), ST_GeomFromText(#{geom}, 4326))
                        </otherwise>
                    </choose>
                </if>
            ) AS sub
        </otherwise>
    </choose>
</select>

<select id="getSpatialTableGeojsonByExtent" parameterType="map" resultType="string">
    <!-- 动态检测几何字段 -->
    <choose>
        <!-- 对于map_elements表，使用element_location字段 -->
        <when test="tableName == 'map_elements'">
            SELECT jsonb_build_object(
                'type', 'FeatureCollection',
                'features', jsonb_agg(
                    jsonb_build_object(
                        'type', 'Feature',
                        'geometry', ST_AsGeoJSON(ST_Transform(element_location, 4326))::jsonb,
                        'properties', to_jsonb(sub) - 'element_location'
                    )
                )
            ) AS geojson
            FROM (
                SELECT * 
                FROM ${tableName}
                WHERE ST_Intersects(
                    ST_Transform(element_location, 4326),
                    ST_MakeEnvelope(#{request.minLon}, #{request.minLat}, #{request.maxLon}, #{request.maxLat}, 4326)
                )
            ) AS sub
        </when>
        <!-- 对于其他表，默认使用geom字段 -->
        <otherwise>
            SELECT jsonb_build_object(
                'type', 'FeatureCollection',
                'features', jsonb_agg(
                    jsonb_build_object(
                        'type', 'Feature',
                        'geometry', ST_AsGeoJSON(ST_Transform(geom, 4326))::jsonb,
                        'properties', to_jsonb(sub) - 'geom'
                    )
                )
            ) AS geojson
            FROM (
                SELECT * 
                FROM ${tableName}
                WHERE ST_Intersects(
                    ST_Transform(geom, 4326),
                    ST_MakeEnvelope(#{request.minLon}, #{request.minLat}, #{request.maxLon}, #{request.maxLat}, 4326)
                )
            ) AS sub
        </otherwise>
    </choose>
</select>

<select id="getSpatialTableGeojsonByFields" parameterType="com.backend.be.model.FieldQueryRequest" resultType="string">
    <!-- 动态检测几何字段 -->
    <choose>
        <!-- 对于map_elements表，使用element_location字段 -->
        <when test="tableName == 'map_elements'">
            SELECT jsonb_build_object(
                'type', 'FeatureCollection',
                'features', jsonb_agg(
                    jsonb_build_object(
                        'type', 'Feature',
                        'geometry', ST_AsGeoJSON(ST_Transform(element_location, 4326))::jsonb,
                        'properties', to_jsonb(sub) - 'element_location'
                    )
                )
            ) AS geojson
            FROM (
                SELECT * 
                FROM ${tableName}
                WHERE 1=1
                <foreach collection="fieldConditions.entrySet()" item="value" index="key" separator=" AND ">
                    <choose>
                        <!-- 处理几何字段的空间查询 -->
                        <when test="key == 'geom' or key == 'element_location'">
                            <choose>
                                <when test="value == null">
                                    ${key} IS NULL
                                </when>
                                <when test="value.startsWith('POINT') or value.startsWith('POLYGON') or value.startsWith('MULTIPOLYGON') or value.startsWith('LINESTRING') or value.startsWith('MULTILINESTRING')">
                                    AND ST_Intersects(ST_Transform(${key}, 4326), ST_GeomFromText(#{value}, 4326))
                                </when>
                                <otherwise>
                                    ${key} = #{value}
                                </otherwise>
                            </choose>
                        </when>
                        <!-- 处理普通字段 -->
                        <when test="value == null">
                            ${key} IS NULL
                        </when>
                        <otherwise>
                            ${key} = #{value}
                        </otherwise>
                    </choose>
                </foreach>
            ) AS sub
        </when>
        <!-- 对于其他表，默认使用geom字段 -->
        <otherwise>
            SELECT jsonb_build_object(
                'type', 'FeatureCollection',
                'features', jsonb_agg(
                    jsonb_build_object(
                        'type', 'Feature',
                        'geometry', ST_AsGeoJSON(ST_Transform(geom, 4326))::jsonb,
                        'properties', to_jsonb(sub) - 'geom'
                    )
                )
            ) AS geojson
            FROM (
                SELECT * 
                FROM ${tableName}
                WHERE 1=1
                <foreach collection="fieldConditions.entrySet()" item="value" index="key" separator=" AND ">
                    <choose>
                        <!-- 处理几何字段的空间查询 -->
                        <when test="key == 'geom' or key == 'element_location'">
                            <choose>
                                <when test="value == null">
                                    ${key} IS NULL
                                </when>
                                <when test="value.startsWith('POINT') or value.startsWith('POLYGON') or value.startsWith('MULTIPOLYGON') or value.startsWith('LINESTRING') or value.startsWith('MULTILINESTRING')">
                                    AND ST_Intersects(ST_Transform(${key}, 4326), ST_GeomFromText(#{value}, 4326))
                                </when>
                                <otherwise>
                                    ${key} = #{value}
                                </otherwise>
                            </choose>
                        </when>
                        <!-- 处理普通字段 -->
                        <when test="value == null">
                            ${key} IS NULL
                        </when>
                        <otherwise>
                            ${key} = #{value}
                        </otherwise>
                    </choose>
                </foreach>
            ) AS sub
        </otherwise>
    </choose>
</select>

</mapper>
